{"version": "https://jsonfeed.org/version/1", "title": "event-driven-svcs", "home_page_url": "https://rogerkohlerjr.github.io/event-driven-svcs/", "feed_url": "https://rogerkohlerjr.github.io/event-driven-svcs/feed_json_updated.json", "description": "A project journey to implement EDA with kafka, redis, rabbitMQ with FastAPI python services.  Documentation site built-in contains a blog with a step-by-step tutorial of how this site came to be.", "icon": null, "authors": [{"name": "Roger Kohler"}], "language": "en", "items": [{"id": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/", "url": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/", "title": "OAuth Flow: GUI, Backend API, and AuthService", "content_html": "<h1>OAuth Flow: GUI, Backend API, and AuthService</h1>\n<p>This document outlines the <strong>OAuth authentication flow</strong> between a <strong>GUI (client application)</strong>, a <strong>Backend API</strong>, and an <strong>AuthService</strong>. The flow covers the following key aspects:</p>\n<ul>\n<li>Initial API access attempt</li>\n<li>Redirection to authentication via AuthService</li>\n<li>JWT token issuance &amp; API authorization</li>\n<li>Handling token expiration &amp; refresh</li>\n</ul>", "image": null, "date_modified": "2025-04-04T08:17:34+00:00", "authors": [{"name": "Roger Kohler"}], "tags": ["UML"]}, {"id": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/", "url": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/", "title": "Welcome to My Blog \u2013 A Journey into Event-Driven Microservices", "content_html": "<h1>Welcome to My Blog \u2013 A Journey into Event-Driven Microservices</h1>\n<h2>Introduction</h2>\n<p>Welcome to the official project blog for <strong>event-driven-svcs</strong>, where I'll be sharing insights, lessons, and hands-on tutorials on building event-driven microservices. This project was born out of a passion for scalable, loosely coupled architectures that leverage technologies like <strong>Kafka, FastAPI, Redis, and RabbitMQ</strong>.</p>", "image": null, "date_modified": "2025-04-04T08:17:34+00:00", "authors": [{"name": "Roger Kohler"}], "tags": ["News"]}, {"id": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/26/how-to-build-this-product/", "url": "https://rogerkohlerjr.github.io/event-driven-svcs/blog/2025/03/26/how-to-build-this-product/", "title": "How to Build this product?", "content_html": "<h1>How to Build this product?</h1>\n<p>In my last post, see <a href=\"auth-flow.md\">here</a>, I diagrammed an OAuth workflow. That workflow is a synchronous workflow, each actor invokes and waits for a response, but it sets the stage for building our event-driven product which will specialize in multiple types of asynchronous workflows. So let's start this product with a discussion about monorepos.</p>\n<h2>Cracking the monorepo</h2>\n<p>A '<em>monorepo</em>' is a single repository that contains multiple projects.\u00a0It is a popular way to organize codebases with many coupled components, and is also used at very big companies like Google, Facebook, and Twitter.</p>", "image": null, "date_modified": "2025-04-04T08:17:34+00:00", "authors": [{"name": "Roger Kohler"}], "tags": ["codebase", "monorepos", "python"]}]}