{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"event-driven-svcs","text":"<p>A project journey to implement EDA with kafka, redis, rabbitMQ with FastAPI python services. Documentation site built-in contains a blog with a step-by-step tutorial of how this site came to be.</p>"},{"location":"modules/","title":"event-driven-svcs Modules","text":""},{"location":"modules/#event_driven_svcs.foo.foo","title":"<code>foo(bar)</code>","text":"<p>Summary line.</p> <p>Extended description of function.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Description of input argument.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Description of return value</p> Source code in <code>event_driven_svcs/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Summary line.\n\n    Extended description of function.\n\n    Args:\n        bar: Description of input argument.\n\n    Returns:\n        Description of return value\n    \"\"\"\n\n    return bar\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/","title":"OAuth Flow: GUI, Backend API, and AuthService","text":"<p>This document outlines the OAuth authentication flow between a GUI (client application), a Backend API, and an AuthService. The flow covers the following key aspects:</p> <ul> <li>Initial API access attempt</li> <li>Redirection to authentication via AuthService</li> <li>JWT token issuance &amp; API authorization</li> <li>Handling token expiration &amp; refresh</li> </ul>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#definitions","title":"Definitions","text":"<p>I'll use a few terms here that I'll define for most freshers to understand. It may sound a bit juvenile but I don't want to lose anyone here:</p> <p>OAuth is like a permission slip for apps and websites.&gt;&gt;&gt; Imagine you go to the library and want to borrow a book, but you forgot your library card. Instead of making a new one the librarian lets you log in with your school ID. The school tells the library who you are, and now you can borrow books without making a new account.</p> <p>OAuth works the same way online. If an app wants to access your info (like your email or photos), it asks a trusted service (like Google or Facebook) for permission. You log in once, approve it, and the app gets a special key to use your info\u2014without ever needing your password. This keeps your data safe and makes logging in easier!</p> <p>JWT (JSON Web Token) is like a digital passport for the internet. It helps websites and apps know who you are without needing you to log in every time. It's your permission slip. The web service doesn't need to access authentication information on you.</p> <p>JWT works the same way\u2014when you log in, the website gives you a special token (like a permission slip) that proves you are allowed to access certain things.</p> <p>This token is a small piece of text with important information inside, like who you are and what you can do. It is safe because it is signed (encrypted), meaning nobody can change it without being caught. Websites and apps use JWTs to keep things fast and secure! The AuthService knows how to decrypt it so only it can vouch for the user bearing the token the user doesn't have to pass their credentials around to everyone.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#sequence-diagram","title":"Sequence Diagram","text":"<p>Aside from the high-level purpose of the OAuth flow, you may not know the details. That is why I am discussing it here. The following is a UML Sequence Diagram representing the entire OAuth flow:</p> <pre><code>sequenceDiagram\n    participant GUI\n    participant BackendAPI\n    participant AuthService\n\n    Note over GUI: User tries to access API\n    GUI-&gt;&gt;BackendAPI: Request API Access (validate endpoint)\n\n    Note over BackendAPI: API Redirects for Authentication\n    BackendAPI--&gt;&gt;GUI: 401 Unauthorized (Redirect to AuthService)\n\n    Note over GUI: User logs in via AuthService\n    GUI-&gt;&gt;AuthService: OAuth Login Request (credentials or OAuth provider)\n    AuthService-&gt;&gt;AuthService: Validate Credentials\n    AuthService--&gt;&gt;GUI: Return Authorization Code\n\n    Note over GUI: Exchange Code for Access Token\n    GUI-&gt;&gt;AuthService: Request Access Token (Authorization Code)\n    AuthService--&gt;&gt;GUI: Return Access Token (JWT)\n\n    Note over GUI: Store JWT Token for API calls\n    GUI-&gt;&gt;BackendAPI: API Request with JWT (Authorization Header)\n\n    BackendAPI-&gt;&gt;AuthService: Validate JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid (User Info)\n    BackendAPI--&gt;&gt;GUI: Return API Response (Data)\n\n    Note over GUI, BackendAPI: Continued Authentication using JWT Token\n\n    GUI-&gt;&gt;BackendAPI: API Request with JWT\n    BackendAPI-&gt;&gt;AuthService: Validate JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid\n    BackendAPI--&gt;&gt;GUI: Return API Response\n\n    Note over GUI: Token Expiry Handling\n    GUI-&gt;&gt;BackendAPI: API Request with Expired JWT\n    BackendAPI--&gt;&gt;GUI: 401 Unauthorized (Token Expired) - Redirect to AuthService\n\n    Note over GUI: Refreshing JWT Token\n    GUI-&gt;&gt;AuthService: Request New Access Token (using Refresh Token)\n    AuthService--&gt;&gt;GUI: Return New JWT Token\n\n    GUI-&gt;&gt;BackendAPI: API Request with New JWT\n    BackendAPI-&gt;&gt;AuthService: Validate New JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid\n    BackendAPI--&gt;&gt;GUI: Return API Response (Data)</code></pre>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#oauth-flow-walkthrough","title":"OAuth Flow Walkthrough","text":""},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#1-initial-api-request","title":"1. Initial API Request","text":"<p>The GUI attempts to access the Backend API by calling a protected endpoint (e.g., /get_items). The Backend API detects that there is no valid JWT token and responds with 401 Unauthorized. The Backend API redirects the GUI to the AuthService for authentication.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#2-oauth-authentication-token-issuance","title":"2. OAuth Authentication &amp; Token Issuance","text":"<p>The GUI redirects the user to the AuthService login page. The user enters credentials (or logs in via an OAuth provider). The AuthService validates the credentials and issues an Authorization Code. The GUI exchanges the Authorization Code for an Access Token (JWT).</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#3-api-access-with-jwt-token","title":"3. API Access with JWT Token","text":"<p>The GUI stores the JWT for future API requests. The GUI makes an authenticated API request, including the JWT in the Authorization header. The Backend API validates the JWT with the AuthService. If valid, the API processes the request and returns the response.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#4-continued-authentication","title":"4. Continued Authentication","text":"<p>The GUI continues sending API requests using the same JWT token. The Backend API validates each request by checking the JWT.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#5-token-expiry-refresh-flow","title":"5. Token Expiry &amp; Refresh Flow","text":"<p>The JWT eventually expires. The GUI sends another API request, but the Backend API detects the expired token and responds with 401 Unauthorized. The GUI requests a new JWT using the refresh token from the AuthService.</p> <p>The AuthService provides a new JWT, which is stored and used for further API requests.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#conclusion","title":"Conclusion","text":"<p>Hopefully, this helps everyone understand the concepts of web authentication using OAuth. This authentication model ensures secure API access and session persistence using JWT and refresh tokens, enabling seamless user experiences with automatic token renewal. It supports OAuth providers, username-password authentication, and secure API communication, making it ideal for modern web and mobile applications.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/","title":"Welcome to My Blog \u2013 A Journey into Event-Driven Microservices","text":""},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#introduction","title":"Introduction","text":"<p>Welcome to the official project blog for event-driven-svcs, where I'll be sharing insights, lessons, and hands-on tutorials on building event-driven microservices. This project was born out of a passion for scalable, loosely coupled architectures that leverage technologies like Kafka, FastAPI, Redis, and RabbitMQ.</p> <p>If you've read about event-driven architecture but never had the chance to implement it yourself, this blog is for you!</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#what-this-blog-covers","title":"What This Blog Covers","text":"<p>Here, you'll find:</p> <ul> <li>Step-by-step guides on setting up Kafka, FastAPI, Redis, and RabbitMQ.</li> <li>Best practices for designing event-driven microservices.</li> <li>Real-world examples and code snippets to reinforce learning.</li> <li>Troubleshooting tips and lessons learned from practical implementations.</li> </ul>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#why-event-driven-architecture","title":"Why Event-Driven Architecture?","text":"<p>Event-driven systems provide scalability, decoupling, and resilience. Whether you're working on real-time analytics, asynchronous processing, or distributed microservices, adopting an event-driven approach can significantly improve system performance and maintainability.</p> <p>However, getting started can be overwhelming due to the variety of tools and design choices. This blog aims to bridge that gap by providing clear, hands-on guidance.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#who-is-this-for","title":"Who Is This For?","text":"<p>This blog is for developers who:</p> <ul> <li>Understand the theory of event-driven architecture but lack hands-on experience.</li> <li>Want to learn how to integrate Kafka, FastAPI, Redis, and RabbitMQ.</li> <li>Are looking for real-world examples instead of just theoretical concepts.</li> <li>Appreciate step-by-step guidance with practical code snippets.</li> </ul>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#whats-next","title":"What\u2019s Next?","text":"<p>Here\u2019s a sneak peek at upcoming blog posts:</p> <ol> <li>Levelset on OAuth handling for WebServices</li> <li>Setting Up a FastAPI Microservice for Event Processing</li> <li>Integrating Kafka for Real-Time Messaging</li> <li>Using Redis for Fast Data Caching and Pub/Sub</li> <li>Implementing Asynchronous Messaging with RabbitMQ</li> <li>Building an End-to-End Event-Driven Workflow</li> </ol> <p>Each post will include code samples, explanations, and best practices to help you build and deploy event-driven microservices with confidence.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#stay-connected","title":"Stay Connected","text":"<p>I\u2019d love to hear your thoughts! Feel free to:</p> <ul> <li>Leave comments or ask questions.</li> <li>Contribute to the GitHub repository (link to your repo).</li> <li>Follow me on LinkedIn for updates.</li> </ul> <p>Thanks for stopping by, and happy coding! \ud83d\ude80</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/","title":"How to Build this product?","text":"<p>In my last post, see here, I diagrammed an OAuth workflow. That workflow is a synchronous workflow, each actor invokes and waits for a response, but it sets the stage for building our event-driven product which will specialize in multiple types of asynchronous workflows. So let's start this product with a discussion about monorepos.</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#cracking-the-monorepo","title":"Cracking the monorepo","text":"<p>A 'monorepo' is a single repository that contains multiple projects.\u00a0It is a popular way to organize codebases with many coupled components, and is also used at very big companies like Google, Facebook, and Twitter.</p> <p>Monorepos can provide quite a pleasant development experience when done right \u2014 with the right tooling, practices, and, of course, the right use case.\u00a0Monorepos solve a very specific problem: local dependencies between projects force them to be updated together, which eliminates certain types of technical debt (e.g. ensures all current projects are always compatible with each other).</p> <p>This post focuses on a very specific use case \u2014\u00a0<code>_uv_</code>\u00a0Python monorepos.\u00a0Until very recently, Python monorepos were quite hard to set up and maintain, with problems like the ones I mentioned above being quite common.</p> <p>However, nowadays, we have a bunch of excellent tooling available with great out-of-the-box monorepo support. Guess why I will be using 'uv' for building and managing this project?</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#a-gui-a-cli-and-a-web-service-walk-into-a-bar","title":"A GUI, a CLI and a Web Service walk into a bar ...","text":"<p>This is a tongue in cheek way of illustrating our target vision ... we will need to create an area (project repo) for 3 or more actors (GUI, CLI, web service). In order to produce a working OAuth workload, we need two or more web services:</p> <ul> <li>'AuthService' for looking up credentials (user name &amp; password) provided by a user</li> <li>'AppService' for the initial application to invoke to get work done. The applications will include a 'GUI' and a 'CLI' command line utility.</li> </ul> <p>Does that joke into make more sense now? So we will start creating the scenario from my last post on OAuth workflow and place it all into a single code base we will create as a monorepo. A monorepo is a code base which has multiple applications or components in it, but each can be developed and run separately from the other. The share a project repository because they share dependencies. Pretend each of those four actors have modules/libraries they depend upon to be built into a single deliverable application or component. Together each actor is part of the product we will build that demonstrate our event-driven services architecture. That implies some products will be separate or independent of the others. They will interact with each other asynchronously.</p> <p>Let's move on ...</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#initial-creation-of-a-repo","title":"Initial creation of a repo","text":"<p>In this post, I am going to share an approach to building Python 'monorepos' that solves these issues in a very elegant way.\u00a0The benefits of this approach are:</p> <ul> <li>it works with any\u00a0<code>uv</code>\u00a0project</li> <li>it needs little to zero maintenance and boilerplate</li> <li>it provides end-to-end pipeline caching\u00a0\u2014 including steps downstream to building the image (like running linters and tests), which is quite rare</li> <li>it\u2019s easy to run locally and in CI</li> </ul> <p>Here are the first commands to make this project monorepo:</p> <pre><code>mkdir event-based-svcs\ncd event-based-svcs\nuv init\nuv add --group dev ruff pytest pytest-cov mkdocstrings mkdocs\nsource .venv/bin/activate\nmkdocs new .\nmkdocs build -s\n</code></pre> <p>Phew!\u00a0That was a lot of commands.\u00a0Let\u2019s break them down:</p> <ul> <li>Creates a directory 'mkdir' and a blank project 'uv init' inside. The 'uv' command makes this a python project repo. The directory (output of the 'tree' command) has the following three mostly blank files added:</li> </ul> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>The main.py is a simple hello world project The pyproject.toml describes a basic python project structure:</p> <pre><code>[project]\nname = \"event-based-svcs\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.13\"\ndependencies = []\n\n[dependency-groups]\ndev = [\n    \"mkdocs&gt;=1.6.1\",\n    \"mkdocstrings&gt;=0.29.0\",\n    \"pytest&gt;=8.3.5\",\n    \"pytest-cov&gt;=6.0.0\",\n    \"ruff&gt;=0.11.2\",\n]\n</code></pre> <ul> <li>Adds some 'uv add' common dependencies to the project - the dependencies are python modules/libraries we will use. We only need these modules when developing the code, so we add them as development '---dev' requirements as they will never be used to run the projects.</li> <li>Creates a virtual environment and activates it</li> <li>Creates a mkdoc project in the docs sub-directory</li> <li>Verifies that the mkdocs project is able to be built</li> </ul> <p>tip -I like to edit the root mkdoc.yml file and setup features like blog plugins</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#make-the-bar-scene-the-monorepo","title":"Make the bar scene ... the monorepo","text":"<p>We need to add sub-projects for each actor in this bar. Each will be some form of an application. Each is able to be built independently and run inter-dependently, and interacts with at least two other applications. The GUI interacts with the AuthService and AppService. The AppService interacts with the GUI and the AppService. You see that?</p> <pre><code>mkdir projects\nuv init --app projects/gui-proj\nuv init --app projects/cli-proj\nuv init --app projects/auth-svc\nuv init --app projects/app-svc\n</code></pre> <p>Each of these commands create a subdirectory under project and will be members of the overall main project. We'll get back to the members part in a bit.</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#add-the-actual-packages-which-have-interdependencies","title":"Add the actual packages which have interdependencies","text":"<p>The reality is each application/component of the product have other friends at this bar. These friends are the packages each depend on to actually do work. These friends might actually be dependent on each other. Say we have two packages, lib-one and lib-two. Lib-one might need lib-two to get its work done.</p> <pre><code>uv init --package --lib projects/lib-one\nuv init --package --lib projects/lib-two\n</code></pre>"},{"location":"blog/2025/03/26/how-to-build-this-product/#package-dependencies","title":"Package Dependencies","text":"<p>Remember how I said there may be dependencies between the packages?  Let's do that now!</p> <p><pre><code>uv add --package lib-two lib-one\n</code></pre> Pay attention to the output fron the command. It has built package lib-one and lib-two.  Uv knows the projects are members in the workspace and manages both projects for you automatically!  And now, the package lib-one is added using a reference to project lib-two using the --package option.</p> <pre><code>Resolved 33 packages in 20ms\n      Built lib-two @ file:///Users/rkohler/code/event-based-svcs/projects/lib-two\n      Built lib-one @ file:///Users/rkohler/code/event-based-svcs/projects/lib-one\nPrepared 2 packages in 581ms\nInstalled 2 packages in 2ms\n + lib-one==0.1.0 (from file:///Users/rkohler/code/event-based-svcs/projects/lib-one)\n + lib-two==0.1.0 (from file:///Users/rkohler/code/event-based-svcs/projects/lib-two)\n</code></pre> <pre><code>cd projects/lib-two\ncat pyproject.toml\n</code></pre> <p>Check out the projects/lib-two pyproject.toml file. </p> <p><pre><code>[project]\nname = \"lib-two\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nauthors = [\n    { name = \"rkohler\", email = \"roger.kohlerjr@gmail.com\" }\n]\nrequires-python = \"&gt;=3.13\"\ndependencies = [\n    \"lib-one\",\n]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.uv.sources]\nlib-one = { workspace = true }\n</code></pre> Examine two new lines:</p> <ul> <li>A dependency to lib-one is added on line 10</li> <li>There are two lines at the end of the file for telling lib-two that the source of lib-ome is in the workspace not PyPI the python package index.</li> <li>No changes are made to the lib-one project since it has no dependency on the other package.</li> </ul> <p>This second addition is important because it tells the project to pay attention to changes to lib-one sources.  It they change, then it will need rebuilding before rebuilding package lib-two.</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#essential-files","title":"Essential files ...","text":"<p>Let's see what we have so far. If we run the tree command we see the structure of our monorepo. A mix of applications and packages to build our product on.</p> <pre><code>tree\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 projects\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app-svc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth-svc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cli-proj\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gui-proj\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 main.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib-one\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 lib_one\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 py.typed\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib-two\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pyproject.toml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 lib_two\n\u2502\u00a0\u00a0             \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 py.typed\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 site\n     :  # editted for brevity\n\u2514\u2500\u2500 uv.lock\n</code></pre> <p>Tip - I like to edit the root pyproject.toml and set workspace.members to ['projects/*'] so that all the packages in the projects directory are recognized as workspace members.</p> <p>We look through the file for the following line, usually the last line of the file:</p> <pre><code>members = [\"projects/gui-proj\", \"projects/cli-proj\", \"projects/auth-svc\", \"projects/app-svc\", \"projects/lib-one\", \"projects/lib-two\"]\n</code></pre> <p>Our product will eventually have more components and packages, so we need to simplify this line to the following:</p> <pre><code>members = [\"projects/*\"]\n</code></pre> <p>My next post will start implementing this OAuth workflow and using the capabilities of the monorepo.</p>"},{"location":"blog/2025/03/26/how-to-build-this-product/#stay-connected","title":"Stay Connected","text":"<p>I\u2019d love to hear your thoughts! Feel free to:</p> <ul> <li>Leave comments or ask questions.</li> <li>Contribute to the\u00a0GitHub repository\u00a0(link to your repo).</li> <li>Follow me on\u00a0LinkedIn\u00a0for updates.</li> </ul> <p>Thanks for stopping by, and happy coding!</p>"},{"location":"blog/archive/2025/","title":"March 2025","text":""},{"location":"blog/category/python/","title":"python","text":""},{"location":"blog/category/monorepos/","title":"monorepos","text":""},{"location":"blog/category/codebase/","title":"codebase","text":""},{"location":"blog/category/uml/","title":"UML","text":""},{"location":"blog/category/news/","title":"News","text":""}]}