{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"event-driven-svcs","text":"<p>A project journey to implement EDA with kafka, redis, rabbitMQ with FastAPI python services. Documentation site built-in contains a blog with a step-by-step tutorial of how this site came to be.</p>"},{"location":"modules/","title":"event-driven-svcs Modules","text":""},{"location":"modules/#event_driven_svcs.foo.foo","title":"<code>foo(bar)</code>","text":"<p>Summary line.</p> <p>Extended description of function.</p> <p>Parameters:</p> Name Type Description Default <code>bar</code> <code>str</code> <p>Description of input argument.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Description of return value</p> Source code in <code>event_driven_svcs/foo.py</code> <pre><code>def foo(bar: str) -&gt; str:\n    \"\"\"Summary line.\n\n    Extended description of function.\n\n    Args:\n        bar: Description of input argument.\n\n    Returns:\n        Description of return value\n    \"\"\"\n\n    return bar\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/","title":"OAuth Flow: GUI, Backend API, and AuthService","text":"<p>This document outlines the OAuth authentication flow between a GUI (client application), a Backend API, and an AuthService. The flow covers the following key aspects:</p> <ul> <li>Initial API access attempt</li> <li>Redirection to authentication via AuthService</li> <li>JWT token issuance &amp; API authorization</li> <li>Handling token expiration &amp; refresh</li> </ul>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#definitions","title":"Definitions","text":"<p>I'll use a few terms here that I'll define for most freshers to understand. It may sound a bit juvenile but I don't want to lose anyone here:</p> <p>OAuth is like a permission slip for apps and websites.&gt;&gt;&gt; Imagine you go to the library and want to borrow a book, but you forgot your library card. Instead of making a new one the librarian lets you log in with your school ID. The school tells the library who you are, and now you can borrow books without making a new account.</p> <p>OAuth works the same way online. If an app wants to access your info (like your email or photos), it asks a trusted service (like Google or Facebook) for permission. You log in once, approve it, and the app gets a special key to use your info\u2014without ever needing your password. This keeps your data safe and makes logging in easier!</p> <p>JWT (JSON Web Token) is like a digital passport for the internet. It helps websites and apps know who you are without needing you to log in every time. It's your permission slip. The web service doesn't need to access authentication information on you.</p> <p>JWT works the same way\u2014when you log in, the website gives you a special token (like a permission slip) that proves you are allowed to access certain things.</p> <p>This token is a small piece of text with important information inside, like who you are and what you can do. It is safe because it is signed (encrypted), meaning nobody can change it without being caught. Websites and apps use JWTs to keep things fast and secure! The AuthService knows how to decrypt it so only it can vouch for the user bearing the token the user doesn't have to pass their credentials around to everyone.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#sequence-diagram","title":"Sequence Diagram","text":"<p>Aside from the high-level purpose of the OAuth flow, you may not know the details. That is why I am discussing it here. The following is a UML Sequence Diagram representing the entire OAuth flow:</p> <pre><code>sequenceDiagram\n    participant GUI\n    participant BackendAPI\n    participant AuthService\n\n    Note over GUI: User tries to access API\n    GUI-&gt;&gt;BackendAPI: Request API Access (validate endpoint)\n\n    Note over BackendAPI: API Redirects for Authentication\n    BackendAPI--&gt;&gt;GUI: 401 Unauthorized (Redirect to AuthService)\n\n    Note over GUI: User logs in via AuthService\n    GUI-&gt;&gt;AuthService: OAuth Login Request (credentials or OAuth provider)\n    AuthService-&gt;&gt;AuthService: Validate Credentials\n    AuthService--&gt;&gt;GUI: Return Authorization Code\n\n    Note over GUI: Exchange Code for Access Token\n    GUI-&gt;&gt;AuthService: Request Access Token (Authorization Code)\n    AuthService--&gt;&gt;GUI: Return Access Token (JWT)\n\n    Note over GUI: Store JWT Token for API calls\n    GUI-&gt;&gt;BackendAPI: API Request with JWT (Authorization Header)\n\n    BackendAPI-&gt;&gt;AuthService: Validate JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid (User Info)\n    BackendAPI--&gt;&gt;GUI: Return API Response (Data)\n\n    Note over GUI, BackendAPI: Continued Authentication using JWT Token\n\n    GUI-&gt;&gt;BackendAPI: API Request with JWT\n    BackendAPI-&gt;&gt;AuthService: Validate JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid\n    BackendAPI--&gt;&gt;GUI: Return API Response\n\n    Note over GUI: Token Expiry Handling\n    GUI-&gt;&gt;BackendAPI: API Request with Expired JWT\n    BackendAPI--&gt;&gt;GUI: 401 Unauthorized (Token Expired) - Redirect to AuthService\n\n    Note over GUI: Refreshing JWT Token\n    GUI-&gt;&gt;AuthService: Request New Access Token (using Refresh Token)\n    AuthService--&gt;&gt;GUI: Return New JWT Token\n\n    GUI-&gt;&gt;BackendAPI: API Request with New JWT\n    BackendAPI-&gt;&gt;AuthService: Validate New JWT Token\n    AuthService--&gt;&gt;BackendAPI: Token Valid\n    BackendAPI--&gt;&gt;GUI: Return API Response (Data)</code></pre>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#oauth-flow-walkthrough","title":"OAuth Flow Walkthrough","text":""},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#1-initial-api-request","title":"1. Initial API Request","text":"<p>The GUI attempts to access the Backend API by calling a protected endpoint (e.g., /get_items). The Backend API detects that there is no valid JWT token and responds with 401 Unauthorized. The Backend API redirects the GUI to the AuthService for authentication.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#2-oauth-authentication-token-issuance","title":"2. OAuth Authentication &amp; Token Issuance","text":"<p>The GUI redirects the user to the AuthService login page. The user enters credentials (or logs in via an OAuth provider). The AuthService validates the credentials and issues an Authorization Code. The GUI exchanges the Authorization Code for an Access Token (JWT).</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#3-api-access-with-jwt-token","title":"3. API Access with JWT Token","text":"<p>The GUI stores the JWT for future API requests. The GUI makes an authenticated API request, including the JWT in the Authorization header. The Backend API validates the JWT with the AuthService. If valid, the API processes the request and returns the response.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#4-continued-authentication","title":"4. Continued Authentication","text":"<p>The GUI continues sending API requests using the same JWT token. The Backend API validates each request by checking the JWT.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#5-token-expiry-refresh-flow","title":"5. Token Expiry &amp; Refresh Flow","text":"<p>The JWT eventually expires. The GUI sends another API request, but the Backend API detects the expired token and responds with 401 Unauthorized. The GUI requests a new JWT using the refresh token from the AuthService.</p> <p>The AuthService provides a new JWT, which is stored and used for further API requests.</p>"},{"location":"blog/2025/03/24/oauth-flow-gui-backend-api-and-authservice/#conclusion","title":"Conclusion","text":"<p>Hopefully, this helps everyone understand the concepts of web authentication using OAuth. This authentication model ensures secure API access and session persistence using JWT and refresh tokens, enabling seamless user experiences with automatic token renewal. It supports OAuth providers, username-password authentication, and secure API communication, making it ideal for modern web and mobile applications.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/","title":"Welcome to My Blog \u2013 A Journey into Event-Driven Microservices","text":""},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#introduction","title":"Introduction","text":"<p>Welcome to the official project blog for event-driven-svcs, where I'll be sharing insights, lessons, and hands-on tutorials on building event-driven microservices. This project was born out of a passion for scalable, loosely coupled architectures that leverage technologies like Kafka, FastAPI, Redis, and RabbitMQ.</p> <p>If you've read about event-driven architecture but never had the chance to implement it yourself, this blog is for you!</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#what-this-blog-covers","title":"What This Blog Covers","text":"<p>Here, you'll find:</p> <ul> <li>Step-by-step guides on setting up Kafka, FastAPI, Redis, and RabbitMQ.</li> <li>Best practices for designing event-driven microservices.</li> <li>Real-world examples and code snippets to reinforce learning.</li> <li>Troubleshooting tips and lessons learned from practical implementations.</li> </ul>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#why-event-driven-architecture","title":"Why Event-Driven Architecture?","text":"<p>Event-driven systems provide scalability, decoupling, and resilience. Whether you're working on real-time analytics, asynchronous processing, or distributed microservices, adopting an event-driven approach can significantly improve system performance and maintainability.</p> <p>However, getting started can be overwhelming due to the variety of tools and design choices. This blog aims to bridge that gap by providing clear, hands-on guidance.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#who-is-this-for","title":"Who Is This For?","text":"<p>This blog is for developers who:</p> <ul> <li>Understand the theory of event-driven architecture but lack hands-on experience.</li> <li>Want to learn how to integrate Kafka, FastAPI, Redis, and RabbitMQ.</li> <li>Are looking for real-world examples instead of just theoretical concepts.</li> <li>Appreciate step-by-step guidance with practical code snippets.</li> </ul>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#whats-next","title":"What\u2019s Next?","text":"<p>Here\u2019s a sneak peek at upcoming blog posts:</p> <ol> <li>Levelset on OAuth handling for WebServices</li> <li>Setting Up a FastAPI Microservice for Event Processing</li> <li>Integrating Kafka for Real-Time Messaging</li> <li>Using Redis for Fast Data Caching and Pub/Sub</li> <li>Implementing Asynchronous Messaging with RabbitMQ</li> <li>Building an End-to-End Event-Driven Workflow</li> </ol> <p>Each post will include code samples, explanations, and best practices to help you build and deploy event-driven microservices with confidence.</p>"},{"location":"blog/2025/03/23/welcome-to-my-blog--a-journey-into-event-driven-microservices/#stay-connected","title":"Stay Connected","text":"<p>I\u2019d love to hear your thoughts! Feel free to:</p> <ul> <li>Leave comments or ask questions.</li> <li>Contribute to the GitHub repository (link to your repo).</li> <li>Follow me on LinkedIn for updates.</li> </ul> <p>Thanks for stopping by, and happy coding! \ud83d\ude80</p>"},{"location":"blog/archive/2025/","title":"March 2025","text":""},{"location":"blog/category/uml/","title":"UML","text":""},{"location":"blog/category/news/","title":"News","text":""}]}